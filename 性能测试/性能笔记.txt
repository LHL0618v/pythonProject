性能的关注点：时间、资源
性能测试定义：使用自动化工具，模拟不同的用户业务场景，针对系统测试各项性能指标
性能测试目的
. 评估当前系统能力
. 定位系统性能瓶颈，并优化性能
. 预估对未来业务的性能支撑

基准测试
1、狭义上：单用户测试（一定是多次）
2、广义上：某个时刻建立已知的性能基准线，当系统的软硬件发生变化后再进行1次以确定变化对性能的影响。
3、用途:
  . 不会单独存在
  . 为多用户并发测试和综合场景测试等提供参考依据
  . 为系统/环境配置、系统优化前后的性能提升/下降提供参考指标
负载测试
1、逐步增加系统负载，确定在满足系统的性能指标（如响应时间等）情况下，找出满足系统需求情况下所能承受的最大负载量。
2、系统最大负载量达到用户要求时，系统才能正式上线使用。
3、也可以找到系统崩溃的极限负载量。
稳定测试
1、在服务器稳定运行（用户正常的业务负载下）的情况下进行长时间测试（1天~1周等），保证服务器满足线上业务需求。
2、系统在用户要求的业务负载下运行达到规定的时间时，系统才能正式上线使用。
压力测试
在强负载的测试，查看系统在峰值情况下是否功能隐患、系统是否具有良好的容错能力和可恢复 能力
1、极限负载情况下的破坏性压力测试
2、高负载下长时间的稳定性压力测试
并发测试（绝对并发）
1、极短的时间内，发送多个请求，来验证服务器对并发的处理能力。
2、应用场景如：抢红包、秒杀、抢购等等

性能指标
1、响应时间：指用户从客户端发起一个请求开始，到客户端接收到从服务器返回的结果，整个过程所耗费的时间。
. 通过http接口请求消息来测试
. 不包括发消息时前端页面的处理时间和收到消息后前端页面的渲染显示时间
. 包括服务器处理时间+网络传输时间
2、并发数（同时发送请求的用户数）
. 某一时刻同时向服务器发送请求的用户数
3、吞吐量
. 单位时间内处理的客户端请求数量，直接体现软件的性能承载能力。
. 单位：每秒事务数（TPS）/每秒查询数（QPS）
 .. QPS：即服务器每秒处理的指定请求的数量
 .. TPS：即控制服务器每秒处理的事务请求的数量
  ... 事务：页面上一个操作，可能对应一个请求/多个请求
 .. 一个事务对应一个请求时：TPS=QPS
 .. 一个事务对应n个请求时：QPS=N*TPS
4、点击数（拓展：点击后发生的请求数量）
. 指客户端向服务端发送请求时，所有的页面资源元素（如：图片、链接、框架css、js等）的请求总数量
. 只有web项目才有此指标
. 强调：不是指页面上的一次点击
5、错误率
. 指系统在负载情况下，失败业务的概率。错误率=（失败业务/业务总数）*100%
. 大多数系统都会要求错误率无限接近于0
. 错误率是一个性能指标，不是功能上的随机BUG
6、资源使用率
. 资源使用量/总的资源可用量*100%
根据经验，常见要求如下：
. CPU不高于75%~85%
. 内存（大小）不高于80%
. 磁盘IO（速率）不高于90%
. 网络（速率）不高于80%

性能测试流程
1、性能测试需求分析：
. 明确被测系统
  .. 熟悉业务功能
  .. 熟悉技术架构
. 明确测试内容
  .. 用户使用频率较高的关键
  .. 逻辑复杂度高的业务
  .. 数据量大的业务
. 明确测试策略
  .. 负责测试
  .. 稳定性测试
  .. 并发测试
  .. 。。。。。。
. 明确测试指标
  .. 有明确需求指标：执行结果与预期指标对比
  .. 无明确需求指标：找竞品对比、对未来流量预估、查资料
2、性能测试计划和方案
. 测什么
  .. 项目背景
  .. 测试目的
  .. 测试范围
. 谁来测
  .. 进度与分工
  .. 交付清单
. 怎么测
  .. 测试策略
3、性能测试用例
  .. 用例名称
  .. 用例编号
  .. 用例描述
  .. 前置条件
  .. 用例步骤
  .. 性能指标（全是实际结果）
     ... 响应时间
     ... 服务器资源使用率
     ... 数据库资源使用率
     ... 。。。。。。
4、性能测试执行：
. 建立测试环境：硬件、软件、网络等。可要求运维和开发协同
. 编写测试脚本：按性能用例需要，使用性能工具编写。
. 性能测试监控：脚本执行前，配置各项性能的监控指标
. 执行测试脚本：设置运行场景并执行，同步手机各项指标，执行前保证脚本调试通过。
5、性能分析和调优
. 对结果分析以后，不符合要求的
. 则会提出性能BUG，由开发进行后续调优
. 验证需要多轮测试，与以前的结果对比，确定调整后系统性能是否提升
6、性能测试报告
. 测试工作的经过回顾
. 缺陷分析和调优
. 风险评估
. 性能测试结果
. 测试工作总结和改进

元件
. 取样器：发送请求
 .. HTTP 超文本传输协议
 .. JDBC Request 数据库请求
. 逻辑控制器：控制语句的执行顺序
 .. if
 .. while
 .. 。。。。
. 前置处理器：对请求参数进行预处理
. 后置处理器：对响应结果进行提取
. 断言：检查接口的返回结果是否与预期结果一致
. 定时器：设置等待
. 测试片段：封装代码块，供其他脚本调用
. 配置元件：测试数据的初始化配置
. 监听器：查看Jmeter脚本的运行结果

作用域
. 取样器：所有组件都是以取样器为核心来运行。不和其他元件相互作用。
. 逻辑控制器：只对其子节点的取样器和逻辑控制器起作用
. 其他元件：
 .. 如果是某个取样器的子节点，该元件只对其父节点起作用。
 .. 如果其父节点不是取样器，则其作用域是该元件父节点下的其他所有后代节点。

同一作用域下元件执行顺序
. 配置元件
. 前置处理器
. 定时器（一定是在取样器之前）
. 取样器
. 后置处理器
. 断言
. 监听器
同一作用域下多个相同类型元件
. 按照测试计划中从上到下的顺序

练习（视频里的）：
定时器1-请求1-定时器1-定时器2-请求2-定时器1-定时器3-请求3

线程组
普通的、常用的可以看做一个虚拟用户组
SetUp线程组=代码中SetUpClass方法：
一种特殊类型，用于执行预测试操作
tearDown线程组=代码中tearDownClass方法：
一种特殊类型，用于执行测试后操作

线程组相关参数
. 线程数：虚拟用户数
. Ramp-Up：全部用户所需时间
. 循环次数：单个用户的运行次数
. 延迟创建线程直到需要：默认启动即创建所有线程，勾选则运行对应线程时才创建。（对外无体现）
. 调度器（循环次数勾选永远，同步设置）
  .. 持续时间：脚本持续运行
  .. 启动延迟：脚本等待延迟

参数化：用不同的测试数据调用相同的测试方法
. 用户定义的变量——配置元件
  .. 定义全局变量
  .. 请求参数格式：${变量名}
. 用户参数——前置处理器
  .. 同一组参数，不同的用户访问时，获取不同的值
  .. 步骤
     ... 添加线程组，设置线程数为n
     ... 添加用户参数
         .... 第一列添加多个变量名
         .... 后续每一列为一组用户的数据
. CSV Data Set Config
  .. 不同用户来或同一用户多次循环时，都可以获得不同的值
    .. 步骤
     ... 定义CSV数据文件
     ... 添加线程组
     ... 添加CSV数据文件设置
. 函数
  .. 自动生成不重复的数据，让每个用户每次循环都能取到不同的数据，不需要提前定义
. 数据库

GET请求
参数
. 在路径中添加参数。？参数名=参数值&参数名=参数值
. 在参数列表中添加。格式：参数名，参数值

POST请求
参数
. 在参数列表中添加（只能添加form格式）
. 在消息体数据中添加（任意格式）

响应断言
任意HTTP请求的响应结果，都可以使用响应断言
要修改的地方
. 测试自动：要检查的项
. 模式匹配规则：比较方式
. 测试模式：预期结果

json断言
响应数据为JSON格式时，优先使用JSON断言
Asser JSON Path exists:用于断言的JSON元素的路径（实际结果）
Additionally assert value：如果你想要用某个值生成断言，请选复选框（必须勾选才能填写期望值）
Match as regular expression：可使用正则表达式断言
Expected Value：期望值（期望结果）
Expect null：如果希望为空，请选择复选框
Invert assertion(will fail if above conditionsmet)：反转断言（如果满足以上条件则失败）
实际结果的写法格式：
$.一级Key.二级Key，如$.weatherinfo.city

断言持续时间
测试HTTP请求的响应时间是否满足要求时使用，最大单位ms（毫秒）

注意：Jmeter自动判断响应状态码（若为4XX/5XX，判定为失败）
提示：如果需要判定4XX/5XX为预期结果，可在复选框选择忽略状态。

JMeter中常用的关联方法
. 正则表达式提取器
 .. 针对的是任意格式的数据
. XPath提取器
 .. 针对的是html格式的数据
. JSON提取器
 .. 针对的是JSON格式的数据

正则表达式
.：通配符，可以代表任意1个字符（除换行回车）
*:代表前面的字符出现0次或者多次
?:代表非贪婪匹配，找到左边界后，只要有匹配的右边界就先停止，之后再继续往下查找。

正则表达式提取器
. 引用名称：存放提取值的参数名称
. 正则表达式：左边界(.*?)右边界
. 模板:用$n$引用起来，表示解析出第n组
. 匹配数字：
 .. 1表示取出模板中第n组数据中的第1个值
 .. -1表示所有取值(返回的是类似列表的形式)
   ... 引用:以列表索引的方式。格式：${变量名_索引}，索引从1开始
 .. 0代表随机取值（极少用到）

XPath提取器
针对HTML格式的响应数据可以提取
. 勾选Use Tidy
. 引用名称：存放提取值的参数名称
. XPath Query：用于提取之的XPath表达式 如：//标签，//标签[@属性名=属性值]
. 匹配数字：
 .. 1表示取出模板中第n组数据中的第1个值
 .. -1表示所有取值(返回的是类似列表的形式)
   ... 引用:以列表索引的方式。格式：${变量名_索引}，索引从1开始
 .. 0代表随机取值（极少用到）

JSON提取器
针对JSON格式的响应数据可以提取
. Names of createrd variables：存放提取值的参数名称
. JSON Path Expressions：用于提取值得JSON的路径表达式 如$.一级KEY.二级KEY
. Match no:
 .. 1表示取出模板中第n组数据中的第1个值
 .. -1表示所有取值(返回的是类似列表的形式)
   ... 引用:以列表索引的方式。格式：${变量名_索引}，索引从1开始
 .. 0代表随机取值（极少用到）

JMeter属性
跨线传递数据时使用
. 在提取数据所在的线程组内添加BeanShell取样器并执行，将提取器的值保存为JMeter属性
 .. 通过函数来保存：${_setProperty(保存的参数名,提取值的参数名)}
. 在需要读取的线程组内通过函数直接读取：${Property(保存的参数名,,)}
. 执行时必须使用串行，在测试计划处勾选独立运行每个线程组

Jmeter录制脚本
. 添加HTTP代理服务器
 .. 设置端口：8888
 .. 目标控制器：脚本存放在哪个线程组
. 开启WIN10的有浏览器代理
 .. 配置代理服务器：127.0.0.1
 .. 设置端口：8888
. 过滤设置采用正则表达式
 .. 包含模式:匹配则抓取
 .. 排除模式：匹配则丢弃

直连数据库
1、添加MySQL驱动jar包：mysql-connector-java-8.0.27.jar
 . 将包放到lib/ext目录下，并重启JMeter
2、配置数据库连接信息：配置元件——>JDBC Connetion Configuration
 . Variable Name：连接名称（JDBC请求时引用）
 . Database URL：jdbc:mysql://localhost:3306/tpshop2.0
   .. 组成：协议+数据库IP+数据库端+连接的数据库名称
 . JDBC DRIVER class：com.mysql.jdbc.Driver(MySQL驱动包位置固定格式)
 . Username:root(连接数据库的用户名)
 . Password:密码
3、添加JDBC请求
 . Variable Name：连接名称（JDBC请求时引用）
 . Query Type：
  .. 查询操作：选择"Select Statement"
  .. 增加、删除、修改：选择"Update Statement"
 . Query：填写SQL语句，末尾不加;
 . Variable Names：保存SQL语句返回结果的变量名
4、在搜索HTTP请求下，添加响应断言，检查响应结果中的字符，是否包含商品URL(URL中含ID)

if逻辑控制器
控制分支，判断是否执行。
1、不勾选Interpret Condition时
 . "${name}"=="baidu"
2、勾选后用函数表达式
 . ${__jexl3("${name}" == "itcast",)}

循环控制器
1、不同点
 . 线程组的循环次数控制的所有的HTTP请求
 . 循环控制器控制的只有子节点的HTTP请求
2、关联：循环控制器次数为M，线程组循环次数为N。
 . 循环控制器下的请求运行：M*N次
 . 线程组下，非循环控制器下的请求运行：N次

FofEach控制器
作用：
一般和用户自定义变量或者正则表达式提取器配合使用，（遍历提取）返回结果中一系列相关的变量。
用户自定义变量
1、提取器/用户自定义变量
 . 返回一组变量：相同变量名前缀+连续的数字后缀
2、相关参数
 . 输入变量前缀：要读取的输入变量的固定前缀
 . 开始循环字段：要读取的输入变量后缀数字的最小值-1
 . 结束循环字段：要读取的输入变量后缀数字的最大值，不填默认读到NULL自动结束
 . 输出变量名称：读取输入变量的值后保存的新变量名

同步定时器
测试抢购、秒杀或者抢红包等高并发的场景时使用
. 设置线程组的总线程数
. 设置并发线程数
. 设置超时时间
 .. 建议设置：不设置的话，若没有达到设置的线程数会死等
 .. 不能设置太小：等待时间后还没达到设置的线程数，会释放所有线程
. 添加聚合报告来查看

常数吞吐定时器
需要按指定的吞吐量发送请求时，可以使用。
. 设置目标吞吐量：每个用户每分钟发送的请求数
. 计算方法：要求QPS*60/线程数

固定定时器
. 必须添加在需要等待的HTTP请求的子节点下
. 在HTTP信息头管理器中，修改HTTP请求的头域




